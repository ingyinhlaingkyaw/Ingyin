{"name": "test_delete_admin[username0]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSelectorException: Message: invalid selector: Unable to locate an element with the xpath expression //div[contains(text(), '('lily1', 'lily4')')] because of the following error:\nSyntaxError: Failed to execute 'evaluate' on 'Document': The string '//div[contains(text(), '('lily1', 'lily4')')]' is not a valid XPath expression.\n  (Session info: chrome=138.0.7204.101); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff653befea5+79173]\n\tGetHandleVerifier [0x0x7ff653beff00+79264]\n\t(No symbol) [0x0x7ff6539a9e5a]\n\t(No symbol) [0x0x7ff6539b184d]\n\t(No symbol) [0x0x7ff6539b489c]\n\t(No symbol) [0x0x7ff6539b496f]\n\t(No symbol) [0x0x7ff6539ffe37]\n\t(No symbol) [0x0x7ff653a0083c]\n\t(No symbol) [0x0x7ff653a54247]\n\t(No symbol) [0x0x7ff653a289af]\n\t(No symbol) [0x0x7ff653a5100d]\n\t(No symbol) [0x0x7ff653a28743]\n\t(No symbol) [0x0x7ff6539f14c1]\n\t(No symbol) [0x0x7ff6539f2253]\n\tGetHandleVerifier [0x0x7ff653eba2dd+3004797]\n\tGetHandleVerifier [0x0x7ff653eb472d+2981325]\n\tGetHandleVerifier [0x0x7ff653ed3380+3107360]\n\tGetHandleVerifier [0x0x7ff653c0aa2e+188622]\n\tGetHandleVerifier [0x0x7ff653c122bf+219487]\n\tGetHandleVerifier [0x0x7ff653bf8df4+115860]\n\tGetHandleVerifier [0x0x7ff653bf8fa9+116297]\n\tGetHandleVerifier [0x0x7ff653bdf558+11256]\n\tBaseThreadInitThunk [0x0x7fff2d57e8d7+23]\n\tRtlUserThreadStart [0x0x7fff2f81c5dc+44]", "trace": "login_as_admin = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a452b261ae60aaba63e866480a9be125\")>, username = ('lily1', 'lily4')\n\n    @pytest.mark.parametrize(\"username\", [(\"lily1\",\"lily4\")])\n    def test_delete_admin(login_as_admin, username):\n        driver = login_as_admin\n        wait = WebDriverWait(driver, 10)\n    \n        admin_tab = wait.until(EC.element_to_be_clickable((By.LINK_TEXT, \"Admin\")))\n        admin_tab.click()\n    \n        # Search by username\n        username_input = wait.until(EC.visibility_of_element_located((By.XPATH, \"//label[text()='Username']/following::div[1]/input\")))\n        username_input.send_keys(username)\n        time.sleep(3)\n    \n        form = wait.until(EC.visibility_of_element_located((By.CLASS_NAME, \"oxd-form\")))\n        form.submit()\n        time.sleep(3)\n    \n>       wait.until(EC.visibility_of_element_located((By.XPATH, f\"//div[contains(text(), '{username}')]\")))\n\ntest_admin.py:136: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:129: in until\n    value = method(self._driver)\n            ^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:217: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\n                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:914: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001E99D55B570>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid selector\",\"message\":\"invalid selector: Unable to locate an elemen...ff653bdf558+11256]\\\\n\\\\tBaseThreadInitThunk [0x0x7fff2d57e8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7fff2f81c5dc+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSelectorException: Message: invalid selector: Unable to locate an element with the xpath expression //div[contains(text(), '('lily1', 'lily4')')] because of the following error:\nE       SyntaxError: Failed to execute 'evaluate' on 'Document': The string '//div[contains(text(), '('lily1', 'lily4')')]' is not a valid XPath expression.\nE         (Session info: chrome=138.0.7204.101); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff653befea5+79173]\nE       \tGetHandleVerifier [0x0x7ff653beff00+79264]\nE       \t(No symbol) [0x0x7ff6539a9e5a]\nE       \t(No symbol) [0x0x7ff6539b184d]\nE       \t(No symbol) [0x0x7ff6539b489c]\nE       \t(No symbol) [0x0x7ff6539b496f]\nE       \t(No symbol) [0x0x7ff6539ffe37]\nE       \t(No symbol) [0x0x7ff653a0083c]\nE       \t(No symbol) [0x0x7ff653a54247]\nE       \t(No symbol) [0x0x7ff653a289af]\nE       \t(No symbol) [0x0x7ff653a5100d]\nE       \t(No symbol) [0x0x7ff653a28743]\nE       \t(No symbol) [0x0x7ff6539f14c1]\nE       \t(No symbol) [0x0x7ff6539f2253]\nE       \tGetHandleVerifier [0x0x7ff653eba2dd+3004797]\nE       \tGetHandleVerifier [0x0x7ff653eb472d+2981325]\nE       \tGetHandleVerifier [0x0x7ff653ed3380+3107360]\nE       \tGetHandleVerifier [0x0x7ff653c0aa2e+188622]\nE       \tGetHandleVerifier [0x0x7ff653c122bf+219487]\nE       \tGetHandleVerifier [0x0x7ff653bf8df4+115860]\nE       \tGetHandleVerifier [0x0x7ff653bf8fa9+116297]\nE       \tGetHandleVerifier [0x0x7ff653bdf558+11256]\nE       \tBaseThreadInitThunk [0x0x7fff2d57e8d7+23]\nE       \tRtlUserThreadStart [0x0x7fff2f81c5dc+44]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSelectorException"}, "parameters": [{"name": "username", "value": "('lily1', 'lily4')"}], "start": 1752548830948, "stop": 1752548840773, "uuid": "3555972d-7862-495d-a236-b0ea3207ee8d", "historyId": "3e2c32fda245a2835ba50194525fff19", "testCaseId": "8ae3817029d696b23b7636dd9b503ac6", "fullName": "test_admin#test_delete_admin", "labels": [{"name": "suite", "value": "test_admin"}, {"name": "host", "value": "HUAB86A4Z"}, {"name": "thread", "value": "16976-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_admin"}]}